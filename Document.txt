Used below comment to generate a randome string for use JWT_SECRET KEY or any other purpose.
CMD : - openssl rand -base64 32

// export const signup = async (req, res) => {
//   try {
//     const { fullname, username, email, password } = req.body;
//     const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
//     if (!emailRegex.test(email)) {
//       return res.status(400).json({ error: "Invalid email format" });
//     }
//     const existingUser = await User.findOne({ username });
//     if (existingUser) {
//       return res.status(400).json({ error: "Username Is Already Taken" });
//     }
//     const existingEmail = await User.findOne({ email });
//     if (existingEmail) {
//       return res.status(400).json({ error: "Email Is Already Taken" });
//     }
//     if (password.length > 8) {
//       return res
//         .status(400)
//         .json({ error: "Password must be at least 8 character long" });
//     }
//     //HASH PASSWORD
//     const salt = await bcrypt.genSalt(10);
//     const hashedPassword = await bcrypt.hash(password, salt);
//     const newUser = new User({
//       fullname,
//       username,
//       email,
//       password: hashedPassword,
//     });
//     if (newUser) {
//       generateTokenAndSetCookie(newUser._id, res);
//       await newUser.save();
//       res.status(201).json({
//         _id: newUser._id,
//         fullname: newUser.fullname,
//         username: newUser.username,
//         email: newUser.email,
//         followers: newUser.followers,
//         following: newUser.following,
//         profileImg: newUser.profileImg,
//         coverImg: newUser.coverImg,
//       });
//     } else {
//       res.status(400).json({ error: "Invalid User Data" });
//     }
//   } catch (error) {
//     console.log("Error in signup Controller", error.message);

//     res.status(500).json({ error: "Internal server Error" });
//   }
// };

// export const login = async (req, res) => {
//   try {
//     const { email, password } = req.body;
//     const user = await User.findOne({ email });
//     const isPasswordCorrect = await bcrypt.compare(
//       password,
//       user?.password
//     );
//     if (!user || !isPasswordCorrect) {
//       return res.status(400).json({ error: "Invalid username or password" });
//     }
//     generateTokenAndSetCookie(user._id, res);
//     return res.status(200).json({
//       
//     });
//   } catch (error) {
//     console.log("Error in login Controller", error.message);

//   return res.status(500).json({ error: "Internal Server Error" });
//   }
// };


export const logout = async (req, res) => {
    try {
      res.cookie("jwt", "", { maxAge: 0 });
      res.status(200).json({ message: "Logged out successfully" });
    } catch (error) {
      console.log("Error in logout controller", error.message);
      res.status(500).json({ error: "Internal Serever Error" });
    }
  };

  export const getMe = async (req, res) => {
  try {
    const user = await User.findById(req.user._id).select("-password");
    res.status(200).json(user);
  } catch (error) {
    console.log("Error in getMe controller", error.message);
    res.status(500).json({ error: "Internal Serever Error" });
      }
};

//loginpage.jsx
import { useState } from "react";
import { Link } from "react-router-dom";

import XSvg from "../../components/svgs/X"

import { MdOutlineMail } from "react-icons/md";
import { MdPassword } from "react-icons/md";
import {useMutation} from "@tanstack/react-query"
// import  { login } from "../../api/auth";
import {toast} from "react-hot-toast";

const LoginPage = () => {
	const [formData, setFormData] = useState({
		username: "",
		password: "",
	});
const {mutate, isPending, isError, error}=useMutation({
	mutationFn: async ({username, password})=>{
		try {
			const res = await fetch("http://localhost:8080/api/auth/login", {
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					},
					body: JSON.stringify({ username, password }),
					});
					const data = await res.json();
					if(!res.ok){
						throw new Error(data.message || "Something went wrong");
					}
		} catch (error) {
			throw new Error(error);
		}
	},
	onSuccess: () => {
		toast.success("Login successful");
	}
})
	const handleSubmit = (e) => {
		e.preventDefault();
		mutate(formData);
		// console.log(formData);
	};

	const handleInputChange = (e) => {
		setFormData({ ...formData, [e.target.name]: e.target.value });
	};

	// const isError = false;

	return (
		<div className='max-w-screen-xl mx-auto flex h-screen'>
			<div className='flex-1 hidden lg:flex items-center  justify-center'>
				<XSvg className='lg:w-2/3 fill-white' />
			</div>
			<div className='flex-1 flex flex-col justify-center items-center'>
				<form className='flex gap-4 flex-col' onSubmit={handleSubmit}>
					<XSvg className='w-24 lg:hidden fill-white' />
					<h1 className='text-4xl font-extrabold text-white'>{"Let's"} go.</h1>
					<label className='input input-bordered rounded flex items-center gap-2'>
						<MdOutlineMail />
						<input
							type='text'
							className='grow'
							placeholder='username'
							name='username'
							onChange={handleInputChange}
							value={formData.username}
						/>
					</label>

					<label className='input input-bordered rounded flex items-center gap-2'>
						<MdPassword />
						<input
							type='password'
							className='grow'
							placeholder='Password'
							name='password'
							onChange={handleInputChange}
							value={formData.password}
						/>
					</label>
					<button className='btn rounded-full btn-primary text-white'>
						{isPending ? "Loading..." : "Login"}
					</button>
					{isError && <p className='text-red-500'>
					{error.message}
					</p>}
				</form>
				<div className='flex flex-col gap-2 mt-4'>
					<p className='text-white text-lg'>{"Don't"} have an account?</p>
					<Link to='/signup'>
						<button className='btn rounded-full btn-primary text-white btn-outline w-full'>Sign up</button>
					</Link>
				</div>
			</div>
		</div>
	);
};
export default LoginPage;